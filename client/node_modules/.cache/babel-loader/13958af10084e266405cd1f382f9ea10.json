{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kongyangma/Workspace/react-redux-blog/client/src/components/auth/signin.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { reduxForm, Field } from 'redux-form';\nimport { signinUser } from '../../actions';\n\nclass Signin extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderField = field => /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      className: \"form-group\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-control\",\n        placeholder: field.label,\n        ...field.input,\n        type: field.type,\n        required: \"required\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }, this);\n  }\n\n  componentWillMount() {\n    if (this.props.authenticated) {\n      // if the user already signed in, navigate to '/posts'\n      this.props.history.replace('/posts');\n    }\n  }\n\n  handleFormSubmit({\n    email,\n    password\n  }) {\n    // console.log(email, password);\n    // need to do something to log user in\n    this.props.signinUser({\n      email,\n      password\n    }, path => {\n      // callback 1: history push\n      this.props.history.push(path);\n    }, (path, state) => {\n      // callback 2: history replace\n      this.props.history.replace(path, state);\n    });\n  }\n\n  renderAlert() {\n    const {\n      state\n    } = this.props.history.location;\n    const {\n      action\n    } = this.props.history; // message: successfully signed up, you can sign in\n\n    if (state && action === 'PUSH') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-success\",\n        role: \"alert\",\n        children: [`[${state.time}] --- `, \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Congratulations!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 36\n        }, this), \" \", state.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this);\n    } // message: sign in failed\n\n\n    if (state && action === 'REPLACE') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger\",\n        role: \"alert\",\n        children: [`[${state.time}] --- `, \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Oops!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 36\n        }, this), \" \", state.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  render() {\n    // these properties comes from ReduxForm\n    const {\n      handleSubmit\n    } = this.props; // when do we need .bind(this)?\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.renderAlert(), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"form-signin\",\n        onSubmit: handleSubmit(this.handleFormSubmit.bind(this)),\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Sign In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          name: \"email\",\n          component: this.renderField,\n          type: \"email\",\n          label: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          name: \"password\",\n          component: this.renderField,\n          type: \"password\",\n          label: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          action: \"submit\",\n          className: \"btn btn-primary\",\n          children: \"Sign In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nSignin = reduxForm({\n  form: 'signin' // name of the form\n\n})(Signin);\n\nfunction mapStateToProps(state) {\n  return {\n    authenticated: state.auth.authenticated\n  };\n}\n\nexport default connect(mapStateToProps, {\n  signinUser\n})(Signin); // The new version of reduxForm (v6) also removes the ability to inject actions or props like the 'connect' helper from React Redux does.\n// To fix this, you'll need to wrap your component with both the 'connect' and 'reduxForm' helpers.\n\n/*\nclass Signup extends Component {\n  render() {\n    return (\n      <Container className=\"mt-5 pt-5\">\n        <Row className=\"justify-content-md-center\">\n          <Form>\n            <Form.Group controlId=\"formBasicPassword\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control type=\"email\" placeholder=\"Email\" />\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicPassword\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control type=\"password\" placeholder=\"Password\" />\n            </Form.Group>\n\n            <Button variant=\"primary\" type=\"submit\">\n              Sign In\n        </Button>\n          </Form>\n        </Row>\n      </Container>\n    );\n  }\n}\n*/","map":{"version":3,"sources":["/Users/kongyangma/Workspace/react-redux-blog/client/src/components/auth/signin.js"],"names":["React","Component","connect","reduxForm","Field","signinUser","Signin","renderField","field","label","input","type","componentWillMount","props","authenticated","history","replace","handleFormSubmit","email","password","path","push","state","renderAlert","location","action","time","message","render","handleSubmit","bind","form","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { reduxForm, Field } from 'redux-form';\nimport { signinUser } from '../../actions';\n\nclass Signin extends Component {\n\n  componentWillMount() {\n    if (this.props.authenticated) {  // if the user already signed in, navigate to '/posts'\n      this.props.history.replace('/posts');\n    }\n  }\n\n  handleFormSubmit({ email, password }) {\n    // console.log(email, password);\n    // need to do something to log user in\n    this.props.signinUser({ email, password }, (path) => {  // callback 1: history push\n      this.props.history.push(path);\n    }, (path, state) => {  // callback 2: history replace\n      this.props.history.replace(path, state);\n    });\n  }\n\n  renderField = (field) => (\n    <fieldset className=\"form-group\">\n      { /*<label>{field.label}</label>*/ }\n      <input className=\"form-control\" placeholder={field.label} {...field.input} type={field.type} required='required' />\n    </fieldset>\n  );\n\n  renderAlert() {\n\n    const { state } = this.props.history.location;\n    const { action } = this.props.history;\n\n    // message: successfully signed up, you can sign in\n    if (state && action === 'PUSH') {\n      return (\n        <div className=\"alert alert-success\" role=\"alert\">\n          {`[${state.time}] --- `} <strong>Congratulations!</strong> {state.message}\n        </div>\n      );\n    }\n\n    // message: sign in failed\n    if (state && action === 'REPLACE') {\n      return (\n        <div className=\"alert alert-danger\" role=\"alert\">\n          {`[${state.time}] --- `} <strong>Oops!</strong> {state.message}\n        </div>\n      );\n    }\n  }\n\n  render() {\n\n    // these properties comes from ReduxForm\n    const { handleSubmit } = this.props;\n\n    // when do we need .bind(this)?\n    return (\n      <div>\n        {this.renderAlert()}\n        <form className=\"form-signin\" onSubmit={handleSubmit(this.handleFormSubmit.bind(this))}>\n          <h3>Sign In</h3>\n          <hr />\n          <Field name=\"email\" component={this.renderField} type=\"email\" label=\"Email\" />\n          <Field name=\"password\" component={this.renderField} type=\"password\" label=\"Password\" />\n          <button action=\"submit\" className=\"btn btn-primary\">Sign In</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nSignin = reduxForm({\n  form: 'signin',  // name of the form\n})(Signin);\n\nfunction mapStateToProps(state) {\n  return { authenticated: state.auth.authenticated };\n}\n\nexport default connect(mapStateToProps, { signinUser })(Signin);\n\n// The new version of reduxForm (v6) also removes the ability to inject actions or props like the 'connect' helper from React Redux does.\n// To fix this, you'll need to wrap your component with both the 'connect' and 'reduxForm' helpers.\n\n\n\n\n\n\n/*\nclass Signup extends Component {\n  render() {\n    return (\n      <Container className=\"mt-5 pt-5\">\n        <Row className=\"justify-content-md-center\">\n          <Form>\n            <Form.Group controlId=\"formBasicPassword\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control type=\"email\" placeholder=\"Email\" />\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicPassword\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control type=\"password\" placeholder=\"Password\" />\n            </Form.Group>\n\n            <Button variant=\"primary\" type=\"submit\">\n              Sign In\n        </Button>\n          </Form>\n        </Row>\n      </Container>\n    );\n  }\n}\n*/"]},"metadata":{},"sourceType":"module"}