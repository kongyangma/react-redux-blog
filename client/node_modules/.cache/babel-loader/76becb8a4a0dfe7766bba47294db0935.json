{"ast":null,"code":"import axios from 'axios';\nimport { reset } from 'redux-form';\nimport { AUTH_USER, UNAUTH_USER, FETCH_PROFILE, CLEAR_PROFILE, UPDATE_PROFILE, FETCH_POSTS, CREATE_POST, FETCH_POST, UPDATE_POST, DELETE_POST, CHECK_AUTHORITY, CREATE_COMMENT, FETCH_COMMENTS } from './types';\nconst ROOT_URL = '/api';\n/**\n * Authentication\n */\n\nexport function signinUser({\n  email,\n  password\n}, historyPush, historyReplace) {\n  // Using redux-thunk (instead of returning an object, return a function)\n  // All redux-thunk doing is giving us arbitrary access to the dispatch function, and allow us to dispatch our own actions at any time we want\n  return function (dispatch) {\n    // Submit email/password to the server\n    axios.post(`${ROOT_URL}/signin`, {\n      email,\n      password\n    }) // axios returns a promise\n    .then(response => {\n      // If request is good (sign in succeeded) ...\n      // - Save the JWT token (use local storage)\n      localStorage.setItem('token', response.data.token); // - Update state to indicate user is authenticated\n\n      dispatch({\n        type: AUTH_USER,\n        payload: response.data.username\n      }); // - Redirect (PUSH) to the route '/posts'\n\n      historyPush('/posts');\n    }).catch(() => {\n      // If request is bad (sign in failed) ...\n      // - Redirect (REPLACE) to the route '/signin', then show an error to the user\n      historyReplace('/signin', {\n        time: new Date().toLocaleString(),\n        message: 'The email and/or password are incorrect.'\n      });\n    });\n  };\n}\nexport function signupUser({\n  email,\n  password,\n  firstName,\n  lastName\n}, historyPush, historyReplace) {\n  return function (dispatch) {\n    axios.post(`${ROOT_URL}/signup`, {\n      email,\n      password,\n      firstName,\n      lastName\n    }) // axios returns a promise\n    .then(response => {\n      // If request is good (sign up succeeded) ...\n      // - Redirect (PUSH) to the route '/signin', then show a success message to the user\n      historyPush('/signin', {\n        time: new Date().toLocaleString(),\n        message: response.data.message\n      });\n    }).catch(({\n      response\n    }) => {\n      // If request is bad (sign up failed) ...\n      // - Redirect (REPLACE) to the route '/signup', then show an error to the user\n      historyReplace('/signup', {\n        time: new Date().toLocaleString(),\n        message: response.data.message\n      });\n    });\n  };\n}\nexport function signoutUser() {\n  // - Delete the JWT token from local storage\n  localStorage.removeItem('token'); // - Update state to indicate the user is not authenticated\n\n  return {\n    type: UNAUTH_USER\n  };\n}\nexport function verifyJwt() {\n  return function (dispatch) {\n    axios.get(`${ROOT_URL}/verify_jwt`, {\n      headers: {\n        authorization: localStorage.getItem('token')\n      }\n    }).then(response => {\n      dispatch({\n        type: AUTH_USER,\n        payload: response.data.username\n      });\n    });\n  };\n}\n/**\n * User Information\n */\n\nexport function fetchProfile() {\n  return function (dispatch) {\n    axios.get(`${ROOT_URL}/profile`, {\n      headers: {\n        authorization: localStorage.getItem('token')\n      }\n    }).then(response => {\n      dispatch({\n        type: FETCH_PROFILE,\n        payload: response.data.user\n      });\n    });\n  };\n}\nexport function clearProfile() {\n  return {\n    type: CLEAR_PROFILE\n  };\n}\nexport function updateProfile({\n  firstName,\n  lastName,\n  birthday,\n  sex,\n  phone,\n  address,\n  occupation,\n  description\n}, historyReplace) {\n  return function (dispatch) {\n    axios.put(`${ROOT_URL}/profile`, {\n      // req.body (2nd parameter)\n      firstName,\n      lastName,\n      birthday,\n      sex,\n      phone,\n      address,\n      occupation,\n      description\n    }, {\n      // header (3rd parameter)\n      headers: {\n        authorization: localStorage.getItem('token')\n      } // require auth\n\n    }).then(response => {\n      // Update profile success\n      // - Update profile\n      dispatch({\n        type: UPDATE_PROFILE,\n        payload: response.data.user\n      }); // - Update username for header\n\n      dispatch({\n        type: AUTH_USER,\n        payload: response.data.user.firstName + ' ' + response.data.user.lastName\n      }); // - history.replace\n\n      historyReplace('/profile', {\n        status: 'success',\n        time: new Date().toLocaleString(),\n        message: 'You have successfully updated your profile.'\n      });\n    }).catch(() => {\n      // Update profile failed\n      historyReplace('/profile', {\n        status: 'fail',\n        time: new Date().toLocaleString(),\n        message: 'Update profile failed. Please try again.'\n      });\n    });\n  };\n}\nexport function changePassword({\n  oldPassword,\n  newPassword\n}, historyReplace) {\n  return function (dispatch) {\n    axios.put(`${ROOT_URL}/password`, {\n      oldPassword,\n      newPassword\n    }, {\n      headers: {\n        authorization: localStorage.getItem('token')\n      } // require auth\n\n    }).then(response => {\n      dispatch(reset('settings')); // Clear the form if success\n\n      historyReplace('/settings', {\n        status: 'success',\n        time: new Date().toLocaleString(),\n        message: response.data.message\n      });\n    }).catch(({\n      response\n    }) => {\n      historyReplace('/settings', {\n        status: 'fail',\n        time: new Date().toLocaleString(),\n        message: response.data.message\n      });\n    });\n  };\n}\n/**\n * Blog Post\n */\n\nexport function fetchPosts() {\n  return function (dispatch) {\n    axios.get(`${ROOT_URL}/posts`).then(response => {\n      dispatch({\n        type: FETCH_POSTS,\n        payload: response.data\n      });\n    });\n  };\n}\nexport function createPost({\n  title,\n  categories,\n  content\n}, historyPush, historyReplace) {\n  return function (dispatch) {\n    axios.post(`${ROOT_URL}/posts`, {\n      title,\n      categories,\n      content\n    }, {\n      headers: {\n        authorization: localStorage.getItem('token')\n      } // require auth\n\n    }).then(response => {\n      // If create post succeed, navigate to the post detail page\n      dispatch({\n        type: CREATE_POST,\n        payload: response.data\n      });\n      historyPush(`/posts/${response.data._id}`);\n    }).catch(({\n      response\n    }) => {\n      // If create post failed, alert failure message\n      historyReplace('/posts/new', {\n        time: new Date().toLocaleString(),\n        message: response.data.message\n      });\n    });\n  };\n}\nexport function fetchPost(id) {\n  return function (dispatch) {\n    axios.get(`${ROOT_URL}/posts/${id}`).then(response => {\n      // console.log(response);\n      dispatch({\n        type: FETCH_POST,\n        payload: response.data\n      });\n    });\n  };\n}\nexport function updatePost({\n  _id,\n  title,\n  categories,\n  content\n}, onEditSuccess, historyReplace) {\n  return function (dispatch) {\n    axios.put(`${ROOT_URL}/posts/${_id}`, {\n      _id,\n      title,\n      categories,\n      content\n    }, {\n      headers: {\n        authorization: localStorage.getItem('token')\n      } // require auth\n\n    }).then(response => {\n      dispatch({\n        type: UPDATE_POST,\n        payload: response.data\n      });\n      onEditSuccess(); // set beingEdit to false\n\n      historyReplace(`/posts/${_id}`, null);\n    }).catch(({\n      response\n    }) => {\n      historyReplace(`/posts/${_id}`, {\n        time: new Date().toLocaleString(),\n        message: response.data.message\n      });\n    });\n  };\n}\nexport function deletePost(id, historyPush) {\n  return function (dispatch) {\n    axios.delete(`${ROOT_URL}/posts/${id}`, {\n      headers: {\n        authorization: localStorage.getItem('token')\n      } // require auth\n\n    }).then(response => {\n      dispatch({\n        type: DELETE_POST,\n        payload: id\n      });\n      historyPush('/posts');\n    });\n  };\n}\nexport function fetchPostsByUserId() {\n  return function (dispatch) {\n    axios.get(`${ROOT_URL}/my_posts`, {\n      headers: {\n        authorization: localStorage.getItem('token')\n      } // require auth\n\n    }).then(response => {\n      dispatch({\n        type: FETCH_POSTS,\n        payload: response.data\n      });\n    });\n  };\n}\n/**\n * Blog Comments\n */\n\nexport function createComment({\n  comment,\n  postId\n}, clearTextEditor, historyReplace) {\n  return function (dispatch) {\n    axios.post(`${ROOT_URL}/comments/${postId}`, {\n      content: comment\n    }, {\n      headers: {\n        authorization: localStorage.getItem('token')\n      } // require auth\n\n    }).then(response => {\n      // If success, clear the text editor\n      dispatch({\n        type: CREATE_COMMENT,\n        payload: response.data\n      });\n      dispatch(reset('comment_new')); // - Clear form value (data)\n\n      clearTextEditor(); // - Clear text editor (UI)\n\n      historyReplace(`/posts/${postId}`, null); // - clear alert message\n    }).catch(({\n      response\n    }) => {\n      // If fail, render alert message\n      // failure reason: un-authenticated\n      if (!response.data.message) {\n        return historyReplace(`/posts/${postId}`, {\n          time: new Date().toLocaleString(),\n          message: 'You must sign in before you can post new comment.'\n        });\n      } // failure reason: comment is empty\n\n\n      historyReplace(`/posts/${postId}`, {\n        time: new Date().toLocaleString(),\n        message: response.data.message\n      });\n    });\n  };\n}\nexport function fetchComments(postId) {\n  return function (dispatch) {\n    axios.get(`${ROOT_URL}/comments/${postId}`).then(response => {\n      dispatch({\n        type: FETCH_COMMENTS,\n        payload: response.data\n      });\n    });\n  };\n}\n/**\n * Check authority: Check if the user has the authority to make change to a specific post\n */\n\nexport function checkAuthority(postId) {\n  return function (dispatch) {\n    axios.get(`${ROOT_URL}/allow_edit_or_delete/${postId}`, {\n      headers: {\n        authorization: localStorage.getItem('token')\n      } // require auth\n\n    }).then(response => {\n      dispatch({\n        type: CHECK_AUTHORITY,\n        payload: response.data.allowChange\n      });\n    }).catch(() => {\n      // If an user is un-authorized, he/she cannot make change to any posts\n      dispatch({\n        type: CHECK_AUTHORITY,\n        payload: false\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Users/kongyangma/Workspace/react-redux-blog/client/src/actions/index.js"],"names":["axios","reset","AUTH_USER","UNAUTH_USER","FETCH_PROFILE","CLEAR_PROFILE","UPDATE_PROFILE","FETCH_POSTS","CREATE_POST","FETCH_POST","UPDATE_POST","DELETE_POST","CHECK_AUTHORITY","CREATE_COMMENT","FETCH_COMMENTS","ROOT_URL","signinUser","email","password","historyPush","historyReplace","dispatch","post","then","response","localStorage","setItem","data","token","type","payload","username","catch","time","Date","toLocaleString","message","signupUser","firstName","lastName","signoutUser","removeItem","verifyJwt","get","headers","authorization","getItem","fetchProfile","user","clearProfile","updateProfile","birthday","sex","phone","address","occupation","description","put","status","changePassword","oldPassword","newPassword","fetchPosts","createPost","title","categories","content","_id","fetchPost","id","updatePost","onEditSuccess","deletePost","delete","fetchPostsByUserId","createComment","comment","postId","clearTextEditor","fetchComments","checkAuthority","allowChange"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { reset } from 'redux-form';\n\nimport {\n  AUTH_USER,\n  UNAUTH_USER,\n\n  FETCH_PROFILE,\n  CLEAR_PROFILE,\n  UPDATE_PROFILE,\n\n  FETCH_POSTS,\n  CREATE_POST,\n  FETCH_POST,\n  UPDATE_POST,\n  DELETE_POST,\n\n  CHECK_AUTHORITY,\n\n  CREATE_COMMENT,\n  FETCH_COMMENTS,\n} from './types';\n\nconst ROOT_URL = '/api';\n\n/**\n * Authentication\n */\n\nexport function signinUser({ email, password }, historyPush, historyReplace) {\n\n  // Using redux-thunk (instead of returning an object, return a function)\n  // All redux-thunk doing is giving us arbitrary access to the dispatch function, and allow us to dispatch our own actions at any time we want\n  return function (dispatch) {\n\n    // Submit email/password to the server\n    axios.post(`${ROOT_URL}/signin`, { email, password })  // axios returns a promise\n      .then(response => {  // If request is good (sign in succeeded) ...\n\n        // - Save the JWT token (use local storage)\n        localStorage.setItem('token', response.data.token);\n\n        // - Update state to indicate user is authenticated\n        dispatch({\n          type: AUTH_USER,\n          payload: response.data.username,\n        });\n\n        // - Redirect (PUSH) to the route '/posts'\n        historyPush('/posts');\n      })\n      .catch(() => {  // If request is bad (sign in failed) ...\n\n        // - Redirect (REPLACE) to the route '/signin', then show an error to the user\n        historyReplace('/signin', {\n          time: new Date().toLocaleString(),\n          message: 'The email and/or password are incorrect.'\n        });\n      });\n  }\n}\n\nexport function signupUser({ email, password, firstName, lastName }, historyPush, historyReplace) {\n\n  return function (dispatch) {\n\n    axios.post(`${ROOT_URL}/signup`, { email, password, firstName, lastName })  // axios returns a promise\n      .then(response => {  // If request is good (sign up succeeded) ...\n\n        // - Redirect (PUSH) to the route '/signin', then show a success message to the user\n        historyPush('/signin', { time: new Date().toLocaleString(), message: response.data.message });\n      })\n      .catch(({ response }) => {  // If request is bad (sign up failed) ...\n\n        // - Redirect (REPLACE) to the route '/signup', then show an error to the user\n        historyReplace('/signup', { time: new Date().toLocaleString(), message: response.data.message });\n      });\n  }\n}\n\nexport function signoutUser() {\n\n  // - Delete the JWT token from local storage\n  localStorage.removeItem('token');\n\n  // - Update state to indicate the user is not authenticated\n  return { type: UNAUTH_USER };\n}\n\nexport function verifyJwt() {\n\n  return function (dispatch) {\n    axios.get(`${ROOT_URL}/verify_jwt`, {\n      headers: { authorization: localStorage.getItem('token') }\n    }).then((response) => {\n      dispatch({\n        type: AUTH_USER,\n        payload: response.data.username,\n      });\n    });\n  }\n}\n\n\n/**\n * User Information\n */\n\nexport function fetchProfile() {\n  return function (dispatch) {\n    axios.get(`${ROOT_URL}/profile`, {\n      headers: { authorization: localStorage.getItem('token') }\n    }).then(response => {\n      dispatch({\n        type: FETCH_PROFILE,\n        payload: response.data.user,\n      });\n    });\n  }\n}\n\nexport function clearProfile() {\n  return {\n    type: CLEAR_PROFILE\n  };\n}\n\nexport function updateProfile({ firstName, lastName, birthday, sex, phone, address, occupation, description }, historyReplace) {\n  return function (dispatch) {\n    axios.put(`${ROOT_URL}/profile`, {  // req.body (2nd parameter)\n      firstName,\n      lastName,\n      birthday,\n      sex,\n      phone,\n      address,\n      occupation,\n      description,\n    }, {  // header (3rd parameter)\n      headers: { authorization: localStorage.getItem('token') },  // require auth\n    }\n    )\n      .then((response) => {  // Update profile success\n        // - Update profile\n        dispatch({\n          type: UPDATE_PROFILE,\n          payload: response.data.user,\n        });\n        // - Update username for header\n        dispatch({\n          type: AUTH_USER,\n          payload: response.data.user.firstName + ' ' + response.data.user.lastName,\n        });\n        // - history.replace\n        historyReplace('/profile', {\n          status: 'success',\n          time: new Date().toLocaleString(),\n          message: 'You have successfully updated your profile.',\n        });\n      })\n      .catch(() => { // Update profile failed\n        historyReplace('/profile', {\n          status: 'fail',\n          time: new Date().toLocaleString(),\n          message: 'Update profile failed. Please try again.',\n        });\n      });\n  }\n}\n\nexport function changePassword({ oldPassword, newPassword }, historyReplace) {\n  return function (dispatch) {\n    axios.put(`${ROOT_URL}/password`, {\n      oldPassword,\n      newPassword,\n    }, {\n      headers: { authorization: localStorage.getItem('token') }, // require auth\n    })\n      .then((response) => {\n        dispatch(reset('settings')); // Clear the form if success\n        historyReplace('/settings', {\n          status: 'success',\n          time: new Date().toLocaleString(),\n          message: response.data.message,\n        });\n      })\n      .catch(({ response }) => {\n        historyReplace('/settings', {\n          status: 'fail',\n          time: new Date().toLocaleString(),\n          message: response.data.message,\n        });\n      });\n  }\n}\n\n\n/**\n * Blog Post\n */\n\nexport function fetchPosts() {\n  return function (dispatch) {\n    axios.get(`${ROOT_URL}/posts`).then((response) => {\n      dispatch({\n        type: FETCH_POSTS,\n        payload: response.data,\n      });\n    });\n  }\n}\n\nexport function createPost({ title, categories, content }, historyPush, historyReplace) {\n  return function (dispatch) {\n    axios.post(`${ROOT_URL}/posts`, {\n      title,\n      categories,\n      content,\n    }, {\n      headers: { authorization: localStorage.getItem('token') },  // require auth\n    })\n      .then((response) => {  // If create post succeed, navigate to the post detail page\n        dispatch({\n          type: CREATE_POST,\n          payload: response.data,\n        });\n        historyPush(`/posts/${response.data._id}`);\n      })\n      .catch(({ response }) => {  // If create post failed, alert failure message\n        historyReplace('/posts/new', {\n          time: new Date().toLocaleString(),\n          message: response.data.message,\n        });\n      });\n  }\n}\n\nexport function fetchPost(id) {\n\n  return function (dispatch) {\n    axios.get(`${ROOT_URL}/posts/${id}`).then(response => {\n      // console.log(response);\n      dispatch({\n        type: FETCH_POST,\n        payload: response.data,\n      });\n    });\n  }\n}\n\nexport function updatePost({ _id, title, categories, content }, onEditSuccess, historyReplace) {\n\n  return function (dispatch) {\n    axios.put(`${ROOT_URL}/posts/${_id}`, {\n      _id,\n      title,\n      categories,\n      content,\n    }, {\n      headers: { authorization: localStorage.getItem('token') },  // require auth\n    })\n      .then((response) => {\n        dispatch({\n          type: UPDATE_POST,\n          payload: response.data,\n        });\n        onEditSuccess();  // set beingEdit to false\n        historyReplace(`/posts/${_id}`, null);\n      })\n      .catch(({ response }) => {\n        historyReplace(`/posts/${_id}`, {\n          time: new Date().toLocaleString(),\n          message: response.data.message,\n        });\n      });\n  }\n}\n\nexport function deletePost(id, historyPush) {\n\n  return function (dispatch) {\n    axios.delete(`${ROOT_URL}/posts/${id}`, {\n      headers: { authorization: localStorage.getItem('token') },  // require auth\n    }).then((response) => {\n      dispatch({\n        type: DELETE_POST,\n        payload: id,\n      });\n      historyPush('/posts');\n    })\n  }\n}\n\nexport function fetchPostsByUserId() {\n\n  return function (dispatch) {\n    axios.get(`${ROOT_URL}/my_posts`, {\n      headers: { authorization: localStorage.getItem('token') },  // require auth\n    })\n      .then((response) => {\n        dispatch({\n          type: FETCH_POSTS,\n          payload: response.data,\n        });\n      });\n  }\n}\n\n\n/**\n * Blog Comments\n */\n\nexport function createComment({ comment, postId }, clearTextEditor, historyReplace) {\n\n  return function (dispatch) {\n    axios.post(`${ROOT_URL}/comments/${postId}`, { content: comment }, {\n      headers: { authorization: localStorage.getItem('token') },  // require auth\n    })\n      .then((response) => {  // If success, clear the text editor\n        dispatch({\n          type: CREATE_COMMENT,\n          payload: response.data,\n        });\n        dispatch(reset('comment_new'));  // - Clear form value (data)\n        clearTextEditor();  // - Clear text editor (UI)\n        historyReplace(`/posts/${postId}`, null);  // - clear alert message\n      })\n      .catch(({ response }) => {  // If fail, render alert message\n\n        // failure reason: un-authenticated\n        if (!response.data.message) {\n          return historyReplace(`/posts/${postId}`, {\n            time: new Date().toLocaleString(),\n            message: 'You must sign in before you can post new comment.',\n          });\n        }\n\n        // failure reason: comment is empty\n        historyReplace(`/posts/${postId}`, {\n          time: new Date().toLocaleString(),\n          message: response.data.message,\n        });\n      });\n  }\n}\n\nexport function fetchComments(postId) {\n\n  return function (dispatch) {\n    axios.get(`${ROOT_URL}/comments/${postId}`).then((response) => {\n      dispatch({\n        type: FETCH_COMMENTS,\n        payload: response.data,\n      });\n    });\n  }\n}\n\n\n/**\n * Check authority: Check if the user has the authority to make change to a specific post\n */\nexport function checkAuthority(postId) {\n\n  return function (dispatch) {\n    axios.get(`${ROOT_URL}/allow_edit_or_delete/${postId}`, {\n      headers: { authorization: localStorage.getItem('token') },  // require auth\n    }).then((response) => {\n      dispatch({\n        type: CHECK_AUTHORITY,\n        payload: response.data.allowChange,\n      });\n    }).catch(() => {  // If an user is un-authorized, he/she cannot make change to any posts\n      dispatch({\n        type: CHECK_AUTHORITY,\n        payload: false,\n      })\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}